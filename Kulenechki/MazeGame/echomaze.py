import pygame
import sys
import random

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Pygame
pygame.init()

# –†–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞
SCREEN_WIDTH = 128
SCREEN_HEIGHT = 160
screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))

# –ù–∞–∑–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
pygame.display.set_caption("Echo Maze")

# –ß–∞—Å—Ç–æ—Ç–∞ –∫–∞–¥—Ä–æ–≤
clock = pygame.time.Clock()
FPS = 30

# –ó–∞–≥—Ä—É–∑–∫–∞ —Å–º–∞–π–ª–∏–∫–∞
font = pygame.font.SysFont('Arial', 20)
player_img = font.render('üòä', True, (255, 255, 255))
player_rect = player_img.get_rect()

# –†–∞–∑–º–µ—Ä –∫–ª–µ—Ç–∫–∏
CELL_SIZE = 10

# –†–∞–∑–º–µ—Ä –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
maze_width = 50
maze_height = 50

def generate_maze():
    maze = []
    for y in range(maze_height):
        row = []
        for x in range(maze_width):
            if random.random() < 0.2:
                row.append(1)  # –°—Ç–µ–Ω–∞
            else:
                row.append(0)  # –ü—É—Å—Ç–æ–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
        maze.append(row)

    # –ì—Ä–∞–Ω–∏—Ü—ã –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    for x in range(maze_width):
        maze[0][x] = 1
        maze[maze_height - 1][x] = 1
    for y in range(maze_height):
        maze[y][0] = 1
        maze[y][maze_width - 1] = 1

    return maze

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–≤–æ–≥–æ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
maze = generate_maze()

# –í–∏–¥–∏–º–æ—Å—Ç—å (False - —Ç–µ–º–Ω–æ—Ç–∞, True - –≤–∏–¥–∏–º–æ)
visibility = [[False for _ in range(maze_width)] for _ in range(maze_height)]

# –ü–æ–∑–∏—Ü–∏—è –∏–≥—Ä–æ–∫–∞ (–≤ –∫–ª–µ—Ç–∫–∞—Ö)
player_cell_x = 1
player_cell_y = 1

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–≥—Ä–æ–∫–∞ –≤ —Å—Ç–∞—Ä—Ç–æ–≤—É—é –ø–æ–∑–∏—Ü–∏—é
player_rect.x = player_cell_x * CELL_SIZE
player_rect.y = player_cell_y * CELL_SIZE

# –†–∞–∑–º–µ—â–µ–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏ (—Ü–µ–ª–∏)
def place_coin():
    while True:
        coin_x = random.randint(1, maze_width - 2)
        coin_y = random.randint(1, maze_height - 2)
        if maze[coin_y][coin_x] == 0 and (coin_x != player_cell_x or coin_y != player_cell_y):
            return coin_x, coin_y

coin_cell_x, coin_cell_y = place_coin()
coin_img = font.render('üí∞', True, (255, 215, 0))
coin_rect = coin_img.get_rect()
coin_rect.x = coin_cell_x * CELL_SIZE
coin_rect.y = coin_cell_y * CELL_SIZE

# –ó–≤—É–∫
try:
    echo_sound = pygame.mixer.Sound('echo.wav')
except pygame.error:
    echo_sound = None

# –§—É–Ω–∫—Ü–∏—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
def draw_maze():
    for y in range(maze_height):
        for x in range(maze_width):
            if visibility[y][x]:
                rect = pygame.Rect(x * CELL_SIZE - camera_x, y * CELL_SIZE - camera_y, CELL_SIZE, CELL_SIZE)
                if maze[y][x] == 1:
                    pygame.draw.rect(screen, (200, 200, 200), rect)
                else:
                    pygame.draw.rect(screen, (50, 50, 50), rect)

# –ö–∞–º–µ—Ä–∞
camera_x = 0
camera_y = 0

# –ì–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –∏–≥—Ä—ã
running = True
while running:
    screen.fill((0, 0, 0))  # –û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞

    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()

    keys = pygame.key.get_pressed()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –ø–æ–∑–∏—Ü–∏–∏
    old_cell_x = player_cell_x
    old_cell_y = player_cell_y

    # –î–≤–∏–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    if keys[pygame.K_LEFT]:
        if maze[player_cell_y][player_cell_x - 1] == 0:
            player_cell_x -= 1
    if keys[pygame.K_RIGHT]:
        if maze[player_cell_y][player_cell_x + 1] == 0:
            player_cell_x += 1
    if keys[pygame.K_UP]:
        if maze[player_cell_y - 1][player_cell_x] == 0:
            player_cell_y -= 1
    if keys[pygame.K_DOWN]:
        if maze[player_cell_y + 1][player_cell_x] == 0:
            player_cell_y += 1

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –∏–≥—Ä–æ–∫–∞
    player_rect.x = player_cell_x * CELL_SIZE - camera_x
    player_rect.y = player_cell_y * CELL_SIZE - camera_y

    # –≠—Ö–æ–ª–æ–∫–∞—Ü–∏—è –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –ø—Ä–æ–±–µ–ª–∞
    if keys[pygame.K_SPACE]:
        # –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –∑–≤—É–∫–∞
        if echo_sound:
            echo_sound.play()

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –∫–ª–µ—Ç–æ–∫ –≤–æ–∫—Ä—É–≥ –∏–≥—Ä–æ–∫–∞
        for y in range(-5, 6):
            for x in range(-5, 6):
                cell_x = player_cell_x + x
                cell_y = player_cell_y + y
                if 0 <= cell_x < maze_width and 0 <= cell_y < maze_height:
                    visibility[cell_y][cell_x] = True

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã
    camera_x = player_cell_x * CELL_SIZE - SCREEN_WIDTH // 2 + CELL_SIZE // 2
    camera_y = player_cell_y * CELL_SIZE - SCREEN_HEIGHT // 2 + CELL_SIZE // 2

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–±–æ—Ä –º–æ–Ω–µ—Ç–∫–∏
    if player_cell_x == coin_cell_x and player_cell_y == coin_cell_y:
        # –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —É—Ä–æ–≤–µ–Ω—å
        maze = generate_maze()
        visibility = [[False for _ in range(maze_width)] for _ in range(maze_height)]
        player_cell_x, player_cell_y = 1, 1
        coin_cell_x, coin_cell_y = place_coin()
        coin_rect.x = coin_cell_x * CELL_SIZE
        coin_rect.y = coin_cell_y * CELL_SIZE

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ª–∞–±–∏—Ä–∏–Ω—Ç–∞
    draw_maze()

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏, –µ—Å–ª–∏ –æ–Ω–∞ –≤ –≤–∏–¥–∏–º–æ–π –æ–±–ª–∞—Å—Ç–∏
    if visibility[coin_cell_y][coin_cell_x]:
        coin_rect.x = coin_cell_x * CELL_SIZE - camera_x
        coin_rect.y = coin_cell_y * CELL_SIZE - camera_y
        screen.blit(coin_img, (coin_rect.x, coin_rect.y))

    # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–≥—Ä–æ–∫–∞
    player_rect.x = player_cell_x * CELL_SIZE - camera_x
    player_rect.y = player_cell_y * CELL_SIZE - camera_y
    screen.blit(player_img, (player_rect.x, player_rect.y))

    pygame.display.flip()
    clock.tick(FPS)

